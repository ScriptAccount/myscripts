-- This file was generated using Luraph Obfuscator v12.5 by memcorrupt.

local lIlIIIIIIIIilIll11Il1 = assert local IiliiiillII1lillIli = select local lIlI11l1ii1l1llI11III = tonumber local lIlli1li11IlIiiiIii1I = unpack local lli1lIlIiiiliiIl11i = pcall local i1iiIIlillIiIIIi1il = setfenv local i11Il1IliIilI1l1iIi = setmetatable local lIliiIi1I1lliiIilllIi = type local lIl1lllIii1l11illi1I1 = getfenv local l1I1IlliIlIi1Iii1lI = tostring local ilI11liliII1i11IIII = error local lIli1llI11Iiil11Illii = string.sub local il1lillil1IlliiiIl1 = string.byte local ii1Ii1Il1iIi1l1IIi1 = string.char local i1i1iii1lli1i1lllil = string.rep local Ii1iIiIlI1iiIIilllI = string.gsub local l1ll1I1lIlill1li1l1 = string.match local iiIil1Ill1llIIllIlI = table.insert local lIlI1I1I11liiIiI111li = il1lillil1IlliiiIl1("[", 1) local i1l1II11iliil11illI, I1ilI1li1I1i11IllIl = #{6063}, #{ 2381, 6647, 4631, 2692, 3694, 5802, 6264, 4984, 2660, 5532, 5610, 3165, 1967, 2891, 3048, 3586, 172, 1935, 2250, 4676, 1126 } + lIlI1I1I11liiIiI111li + 130959 local II1ilill1lIl1l1lI1l = {} local lIlililiI1lilI11i1l1I = 1 local I1ll11lIIiil111llII, lIiilI11Ii1i1l1lIIl local function iI1il1111lii1lIiliI(lilIi111Iil1IIlIi1i, lIlI1IiIl1I11i1IllIIi) local l1iIiIIllll111iiIIi lilIi111Iil1IIlIi1i = Ii1iIiIlI1iiIIilllI(lIli1llI11Iiil11Illii(lilIi111Iil1IIlIi1i, 5), "..", function(iiI1i1i1ilIl1IIill1) if il1lillil1IlliiiIl1(iiI1i1i1ilIl1IIill1, 2) == 72 then l1iIiIIllll111iiIIi = lIlI11l1ii1l1llI11III(lIli1llI11Iiil11Illii(iiI1i1i1ilIl1IIill1, 1, 1)) return "" else local lI11l11IIl1l1I11lli = ii1Ii1Il1iIi1l1IIi1(lIlI11l1ii1l1llI11III(iiI1i1i1ilIl1IIill1, 16)) if l1iIiIIllll111iiIIi then local i1i1l1iIl1l1iiIiI1l = i1i1iii1lli1i1lllil(lI11l11IIl1l1I11lli, l1iIiIIllll111iiIIi) l1iIiIIllll111iiIIi = nil return i1i1l1iIl1l1iiIiI1l else return lI11l11IIl1l1I11lli end end end) local function l11II1I1l11lIiiIl11() local iiiiIilIilIlIll1iII = il1lillil1IlliiiIl1(lilIi111Iil1IIlIi1i, lIlililiI1lilI11i1l1I, lIlililiI1lilI11i1l1I) lIlililiI1lilI11i1l1I = lIlililiI1lilI11i1l1I + 1 return iiiiIilIilIlIll1iII end local function il1i1l1IIII1I1li111() local iiiiIilIilIlIll1iII, lI11l11IIl1l1I11lli, i1i1l1iIl1l1iiIiI1l, IIIIIiiI1iIll1iiiiI = il1lillil1IlliiiIl1(lilIi111Iil1IIlIi1i, lIlililiI1lilI11i1l1I, lIlililiI1lilI11i1l1I + 3) lIlililiI1lilI11i1l1I = lIlililiI1lilI11i1l1I + 4 return IIIIIiiI1iIll1iiiiI * 16777216 + i1i1l1iIl1l1iiIiI1l * 65536 + lI11l11IIl1l1I11lli * 256 + iiiiIilIilIlIll1iII end local function lIlIlIlll1ii1IiliiilI(il1Ii1llI1li111liii, lIlIIi11lIilillIl1Ill, l111Ii11l1lIii11i1i) if l111Ii11l1lIii11i1i then local IililI1lIIIli1i1Iil, i11I1ll11Il1liI1Il1 = 0, 0 for I1111I1lII1Ii1ii1I1 = lIlIIi11lIilillIl1Ill, l111Ii11l1lIii11i1i do IililI1lIIIli1i1Iil = IililI1lIIIli1i1Iil + 2 ^ i11I1ll11Il1liI1Il1 * lIlIlIlll1ii1IiliiilI(il1Ii1llI1li111liii, I1111I1lII1Ii1ii1I1) i11I1ll11Il1liI1Il1 = i11I1ll11Il1liI1Il1 + 1 end return IililI1lIIIli1i1Iil else local lIl111I1I1llI1i1iIlli = 2 ^ (lIlIIi11lIilillIl1Ill - 1) return lIl111I1I1llI1i1iIlli <= il1Ii1llI1li111liii % (lIl111I1I1llI1i1iIlli + lIl111I1I1llI1i1iIlli) and 1 or 0 end end local function lIllI1iI1llii1lli1Ili() local iiiiIilIilIlIll1iII, lI11l11IIl1l1I11lli = il1i1l1IIII1I1li111(), il1i1l1IIII1I1li111() if iiiiIilIilIlIll1iII == 0 and lI11l11IIl1l1I11lli == 0 then return 0 end return (-2 * lIlIlIlll1ii1IiliiilI(lI11l11IIl1l1I11lli, 32) + 1) * 2 ^ (lIlIlIlll1ii1IiliiilI(lI11l11IIl1l1I11lli, 21, 31) - 1023) * ((lIlIlIlll1ii1IiliiilI(lI11l11IIl1l1I11lli, 1, 20) * 4294967296 + iiiiIilIilIlIll1iII) / 4503599627370496 + 1) end local lIl1iii11IiiIIi11il11 = bit or bit32 local l1lilIIiiiI1i1i1li1 = lIl1iii11IiiIIi11il11 and lIl1iii11IiiIIi11il11.bxor or function(iiiiIilIilIlIll1iII, lI11l11IIl1l1I11lli) local lIlIIli1lli1i1i1Ili1l = 1 local i1i1l1iIl1l1iiIiI1l = 0 while iiiiIilIilIlIll1iII > 0 and lI11l11IIl1l1I11lli > 0 do local lIliIl1i1iliIII11Illl = iiiiIilIilIlIll1iII % 2 local lIl11lliI11Illl1iil = lI11l11IIl1l1I11lli % 2 if lIliIl1i1iliIII11Illl ~= lIl11lliI11Illl1iil then i1i1l1iIl1l1iiIiI1l = i1i1l1iIl1l1iiIiI1l + lIlIIli1lli1i1i1Ili1l end iiiiIilIilIlIll1iII = (iiiiIilIilIlIll1iII - lIliIl1i1iliIII11Illl) / 2 lI11l11IIl1l1I11lli = (lI11l11IIl1l1I11lli - lIl11lliI11Illl1iil) / 2 lIlIIli1lli1i1i1Ili1l = lIlIIli1lli1i1i1Ili1l * 2 end if iiiiIilIilIlIll1iII < lI11l11IIl1l1I11lli then iiiiIilIilIlIll1iII = lI11l11IIl1l1I11lli end while iiiiIilIilIlIll1iII > 0 do local lIliIl1i1iliIII11Illl = iiiiIilIilIlIll1iII % 2 if lIliIl1i1iliIII11Illl > 0 then i1i1l1iIl1l1iiIiI1l = i1i1l1iIl1l1iiIiI1l + lIlIIli1lli1i1i1Ili1l end iiiiIilIilIlIll1iII = (iiiiIilIilIlIll1iII - lIliIl1i1iliIII11Illl) / 2 lIlIIli1lli1i1i1Ili1l = lIlIIli1lli1i1i1Ili1l * 2 end return i1i1l1iIl1l1iiIiI1l end local function lIlIlllil1lil1l1l1ii1(ilIlil1iIl111l11i1i) local IilIliilI11IlIiIl1l = { il1lillil1IlliiiIl1(lilIi111Iil1IIlIi1i, lIlililiI1lilI11i1l1I, lIlililiI1lilI11i1l1I + 3) } lIlililiI1lilI11i1l1I = lIlililiI1lilI11i1l1I + 4 local iiiiIilIilIlIll1iII = l1lilIIiiiI1i1i1li1(IilIliilI11IlIiIl1l[1], lIiilI11Ii1i1l1lIIl) local lI11l11IIl1l1I11lli = l1lilIIiiiI1i1i1li1(IilIliilI11IlIiIl1l[2], lIiilI11Ii1i1l1lIIl) local i1i1l1iIl1l1iiIiI1l = l1lilIIiiiI1i1i1li1(IilIliilI11IlIiIl1l[3], lIiilI11Ii1i1l1lIIl) local IIIIIiiI1iIll1iiiiI = l1lilIIiiiI1i1i1li1(IilIliilI11IlIiIl1l[4], lIiilI11Ii1i1l1lIIl) lIiilI11Ii1i1l1lIIl = (37 * lIiilI11Ii1i1l1lIIl + ilIlil1iIl111l11i1i) % 256 return IIIIIiiI1iIll1iiiiI * 16777216 + i1i1l1iIl1l1iiIiI1l * 65536 + lI11l11IIl1l1I11lli * 256 + iiiiIilIilIlIll1iII end local function IiIlIllIilliIl1ilIl(iIII1liiilliiiIiI1I) local lIlI1il1iiiliII1l1l1I = il1i1l1IIII1I1li111() local II11ilIllliIi111lii = "" for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, lIlI1il1iiiliII1l1l1I do II11ilIllliIi111lii = II11ilIllliIi111lii .. ii1Ii1Il1iIi1l1IIi1(l1lilIIiiiI1i1i1li1(il1lillil1IlliiiIl1(lilIi111Iil1IIlIi1i, lIlililiI1lilI11i1l1I + I1111I1lII1Ii1ii1I1 - 1), I1ll11lIIiil111llII)) I1ll11lIIiil111llII = (iIII1liiilliiiIiI1I * I1ll11lIIiil111llII + 81) % 256 end lIlililiI1lilI11i1l1I = lIlililiI1lilI11i1l1I + lIlI1il1iiiliII1l1l1I return II11ilIllliIi111lii end I1ll11lIIiil111llII = l11II1I1l11lIiiIl11() lIiilI11Ii1i1l1lIIl = l11II1I1l11lIiiIl11() local Il1l1i11lilll1lI11l = {} for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, l11II1I1l11lIiiIl11() do local IiIIl1i1i1II11l11Ii = l11II1I1l11lIiiIl11() local lIIiI111l1i1iiIlii1 = (I1111I1lII1Ii1ii1I1 - 1) * 2 Il1l1i11lilll1lI11l[lIIiI111l1i1iiIlii1] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, 1, 4) Il1l1i11lilll1lI11l[lIIiI111l1i1iiIlii1 + 1] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, 5, 8) end local function Il1I1Il1l1IIiliiIlI() local l1lililIllll1I1IiIl = { {}, {}, nil, nil, {}, nil, {} } local iIiiIlI1l1li11IiIli = il1i1l1IIII1I1li111() for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, iIiiIlI1l1li11IiIli do l1lililIllll1I1IiIl[1][I1111I1lII1Ii1ii1I1 - i1l1II11iliil11illI] = Il1I1Il1l1IIiliiIlI() end local iIiiIlI1l1li11IiIli = il1i1l1IIII1I1li111() for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, iIiiIlI1l1li11IiIli do l1lililIllll1I1IiIl[7][I1111I1lII1Ii1ii1I1] = il1i1l1IIII1I1li111() end il1i1l1IIII1I1li111() l1lililIllll1I1IiIl[4] = l11II1I1l11lIiiIl11() il1i1l1IIII1I1li111() l11II1I1l11lIiiIl11() local lIll111li1iiil11llI1l = il1i1l1IIII1I1li111() - (#{ 47, 3804, 476, 3411, 5851, 1258, 738, 4409, 4744, 6235, 6472, 6772, 62, 5731, 6394, 2107, 2086, 5099, 3627, 361, 1639, 2809, 3511, 102 } + lIlI1I1I11liiIiI111li + 133630) local iIl11iIIII11liili1I = l11II1I1l11lIiiIl11() for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, lIll111li1iiil11llI1l do local lIlilil1liIl111iI111l = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local IiIIl1i1i1II11l11Ii = lIlIlllil1lil1l1l1ii1(iIl11iIIII11liili1I) lIlilil1liIl111iI111l[3] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, #{5698}, #{ 6345, 1218, 4172, 5185, 981, 307, 4998, 3156, 3076, 2311, 5040, 5148, 4675, 6468, 3355, 129, 4907, 5940 }) lIlilil1liIl111iI111l[10] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, #{ 4594, 478, 4212, 523, 1577, 5913, 3122, 2586, 5318, 649, 5731, 2436, 1886, 6067, 1183, 702, 77, 4178, 2540 }, #{ 6166, 4651, 6561, 1010, 4153, 5602, 6851, 2427, 4188, 3970, 6380, 3189, 1121, 1201, 411, 702, 4118, 6507, 3797, 6309 } + lIlI1I1I11liiIiI111li + -85) lIlilil1liIl111iI111l[7] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, #{ 4712, 3041, 2017, 1944, 6547, 1244, 1578, 5152, 4759, 1599, 1852, 6894, 4466, 5080, 1460, 5814, 536, 6537, 1225, 4058, 554 } + lIlI1I1I11liiIiI111li + -85, #{ 5404, 3693, 599, 3610, 1648, 2394, 5603, 1552, 6293, 3645, 762, 3061, 6456, 3549, 1783, 6627, 5959, 1535, 904, 3175 } + lIlI1I1I11liiIiI111li + -79) lIlilil1liIl111iI111l[9] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, #{ 3209, 4628, 3015, 4713, 1624, 6176, 6852, 121, 3242, 284 }, #{ 5907, 5560, 3657, 4963, 2198, 6230, 3131, 3303, 6455, 4640, 828, 1169, 4520, 4514, 5779, 6685, 5588, 4629 }) lIlilil1liIl111iI111l[8] = lIlIlIlll1ii1IiliiilI(IiIIl1i1i1II11l11Ii, #{148}, #{ 5141, 6577, 4352, 5499, 5766, 4685, 2606, 292, 840 }) l1lililIllll1I1IiIl[2][I1111I1lII1Ii1ii1I1] = lIlilil1liIl111iI111l end l1lililIllll1I1IiIl[3] = l11II1I1l11lIiiIl11() l1lililIllll1I1IiIl[6] = l11II1I1l11lIiiIl11() l11II1I1l11lIiiIl11() l11II1I1l11lIiiIl11() il1i1l1IIII1I1li111() local iIiiIlI1l1li11IiIli = il1i1l1IIII1I1li111() - (#{ 950, 1864, 452, 3485, 5174, 1264, 1131, 6071, 4641, 3665, 630, 4636, 5564, 4619, 1202, 4743, 702, 5679, 3027, 3197, 5960, 2885, 3778, 73 } + lIlI1I1I11liiIiI111li + 133613) local lIliil1lIIiiI1ili1lli = l11II1I1l11lIiiIl11() for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, iIiiIlI1l1li11IiIli do local IlI1I11I1i11llill1l local lIliiIi1I1lliiIilllIi = l11II1I1l11lIiiIl11() if lIliiIi1I1lliiIilllIi == #{ 648, 1935, 3876, 3236, 6659, 4657, 1698, 1277, 6578, 4278, 6189, 730, 832, 5870, 4822, 5291, 4630, 2284, 6285, 6715, 1627 } + lIlI1I1I11liiIiI111li + 33 then IlI1I11I1i11llill1l = lIli1llI11Iiil11Illii(IiIlIllIilliIl1ilIl(#{ 6592, 571, 1157, 6919, 6103, 1505, 2755, 1375, 319, 3449, 5470, 3892, 2345, 787, 6339, 5431, 1481, 1272, 4558, 4431, 812 } + lIlI1I1I11liiIiI111li + 8), #{6872, 1382}) end if lIliiIi1I1lliiIilllIi == #{ 6153, 3844, 5285, 6301, 5205, 2008, 4042, 1126, 2379, 3186, 6909, 801, 2297, 2680 } then IlI1I11I1i11llill1l = #{ 1739, 2362, 3307, 589, 4675, 1587, 193, 3951, 4953, 3621, 1037, 452, 6147, 2202, 6016, 3625, 2061, 2354, 5755, 3229, 5521, 6431, 1040 } + lIlI1I1I11liiIiI111li + 11327 == #{ 1739, 2362, 3307, 589, 4675, 1587, 193, 3951, 4953, 3621, 1037, 452, 6147, 2202, 6016, 3625, 2061, 2354, 5755, 3229, 5521, 6431, 1040 } + lIlI1I1I11liiIiI111li + 11327 end if lIliiIi1I1lliiIilllIi == #{ 2811, 811, 1377, 2001, 5411, 4565, 925, 282, 4328, 6944, 6820, 760, 1675, 6180, 5840, 5849, 4875, 6493, 3887, 1814, 6747 } + lIlI1I1I11liiIiI111li + -55 then IlI1I11I1i11llill1l = lIllI1iI1llii1lli1Ili() end if lIliiIi1I1lliiIilllIi == #{ 5415, 4142, 343, 6286, 933, 4109, 219, 4866, 5581, 5092, 4632, 14, 731, 4747, 1793, 6415, 3761, 4513, 6487, 4567 } + lIlI1I1I11liiIiI111li + 72 then IlI1I11I1i11llill1l = lIli1llI11Iiil11Illii(IiIlIllIilliIl1ilIl(#{ 6592, 571, 1157, 6919, 6103, 1505, 2755, 1375, 319, 3449, 5470, 3892, 2345, 787, 6339, 5431, 1481, 1272, 4558, 4431, 812 } + lIlI1I1I11liiIiI111li + 8), #{6872, 1382}) end if lIliiIi1I1lliiIilllIi == #{ 1504, 1408, 4021, 2262, 1315, 4840, 4564, 5404, 695, 5136, 6459, 4323, 6585, 6088, 1169, 6742, 3898, 1554, 251, 5175, 3660, 3716, 2321, 4898 } + lIlI1I1I11liiIiI111li + 56 then IlI1I11I1i11llill1l = #{ 6616, 3864, 1092, 3353, 980, 1545, 3491, 4080, 1306, 1509, 2461, 2904, 4385, 59, 5669, 4194, 6408, 1659, 2009, 4546, 147, 1731 } + lIlI1I1I11liiIiI111li + 59501 == #{ 6881, 3785, 65, 1545, 928, 6653, 1663, 1210, 2140, 5538, 1865, 716, 360, 6865, 5462, 2909, 651, 2435, 3567, 606, 2822, 2805 } + lIlI1I1I11liiIiI111li + 97959 end if lIliiIi1I1lliiIilllIi == #{ 2596, 6626, 3545, 184, 1827, 6190, 6884, 99, 1576, 1560, 5943, 6306, 3129, 457, 2217, 4561, 6211, 3352, 5973, 6175, 1627, 1202, 4612, 2649 } + lIlI1I1I11liiIiI111li + 94 then IlI1I11I1i11llill1l = lIli1llI11Iiil11Illii(IiIlIllIilliIl1ilIl(lIliil1lIIiiI1ili1lli), #{ 3840, 2624, 5841 }) end if lIliiIi1I1lliiIilllIi == #{ 4695, 4742, 3296, 103, 5332, 3538, 1484, 2178, 6540, 6093, 6546, 5165, 6652, 6334, 5019, 1593, 1244, 2971, 1420, 2887, 6688, 1018, 2231 } + lIlI1I1I11liiIiI111li + -44 then IlI1I11I1i11llill1l = il1i1l1IIII1I1li111() end if lIliiIi1I1lliiIilllIi == #{ 3538, 1549, 5440, 1546, 3193, 6955, 5570, 1804, 10, 1459, 3205, 315, 4007, 4031, 755, 3220, 2006, 14, 1719, 4446 } + lIlI1I1I11liiIiI111li + 120 then IlI1I11I1i11llill1l = lIllI1iI1llii1lli1Ili() end if lIliiIi1I1lliiIilllIi == #{ 5516, 4875, 6760, 5773, 3115, 5701, 3471, 5718, 4747, 2565, 3947, 898, 1128, 6339, 1220, 3467, 1394, 4235, 3056, 5784, 6925, 3221, 4059, 4890 } + lIlI1I1I11liiIiI111li + -87 then IlI1I11I1i11llill1l = lIllI1iI1llii1lli1Ili() end l1lililIllll1I1IiIl[5][I1111I1lII1Ii1ii1I1 - i1l1II11iliil11illI] = IlI1I11I1i11llill1l end for I1111I1lII1Ii1ii1I1 = i1l1II11iliil11illI, lIll111li1iiil11llI1l do local lIlilil1liIl111iI111l = l1lililIllll1I1IiIl[2][I1111I1lII1Ii1ii1I1] local lliiilIiIl1iIi1i11i = Il1l1i11lilll1lI11l[lIlilil1liIl111iI111l[7]] if lliiilIiIl1iIi1i11i == #{ 2244, 6607, 1683 } then if lIlilil1liIl111iI111l[8] > 255 then lIlilil1liIl111iI111l[1] = true lIlilil1liIl111iI111l[4] = l1lililIllll1I1IiIl[5][lIlilil1liIl111iI111l[8] - 256] end if lIlilil1liIl111iI111l[9] > 255 then lIlilil1liIl111iI111l[5] = true lIlilil1liIl111iI111l[2] = l1lililIllll1I1IiIl[5][lIlilil1liIl111iI111l[9] - 256] end end if lliiilIiIl1iIi1i11i == #{ 5507, 2246, 3546, 5100 } then lIlilil1liIl111iI111l[6] = l1lililIllll1I1IiIl[5][lIlilil1liIl111iI111l[3]] end if lliiilIiIl1iIi1i11i == #{1249} and lIlilil1liIl111iI111l[8] > 255 then lIlilil1liIl111iI111l[1] = true lIlilil1liIl111iI111l[4] = l1lililIllll1I1IiIl[5][lIlilil1liIl111iI111l[8] - 256] end if lliiilIiIl1iIi1i11i == #{2687, 1456} and lIlilil1liIl111iI111l[9] > 255 then lIlilil1liIl111iI111l[5] = true lIlilil1liIl111iI111l[2] = l1lililIllll1I1IiIl[5][lIlilil1liIl111iI111l[9] - 256] end end return l1lililIllll1I1IiIl end local function iiI1lIi1lIl1l1llIII(l1lililIllll1I1IiIl, lIlI1IiIl1I11i1IllIIi, i1liiIi111lllli1I1l) local l1Ili1Il1iIIIill11I, Iill1l1Ili1111i1lIi = 14, 10 local lIllI11ilillI1il1IiII = l1lililIllll1I1IiIl[2] local Ill1III1II1I1liill1 = 3 local ili1i11IlIiil1iIII1 = l1lililIllll1I1IiIl[1] local Il11iil1ilIIIliI11i = l1lililIllll1I1IiIl[6] local liliiIIi1ii1lI1lili = l1lililIllll1I1IiIl[4] local iliIiii11IiIi11iiII = 7 local l1i11ll1i11IlililiI = l1lililIllll1I1IiIl[7] local Iillill1I1Iii11ilIi = 8 local function III1lIlIll11i1lllll(...) local lIl11iiI11I111iIllI11 = 0 local lIlIii1ll1lilII1i1Il1 = { lIlli1li11IlIiiiIii1I({}, 1, liliiIIi1ii1lI1lili) } local iIlIi1iII11i11IlIIl = 1 local liI1iIiiililll1ii1i = {} local IIlIi1II1I1I1iiiiii = {} local lIlI1IiIl1I11i1IllIIi = lIl1lllIii1l11illi1I1() local iIli1I111lIliIiIl1l = { ... } local I1i1IIIIllii1lIIlIl = #iIli1I111lIliIiIl1l - 1 for I1111I1lII1Ii1ii1I1 = 0, I1i1IIIIllii1lIIlIl do if I1111I1lII1Ii1ii1I1 < Il11iil1ilIIIliI11i then lIlIii1ll1lilII1i1Il1[I1111I1lII1Ii1ii1I1] = iIli1I111lIliIiIl1l[I1111I1lII1Ii1ii1I1 + 1] end end local function I1ii1I1iil1Ill1lI1I(...) local i1i1l1iIl1l1iiIiI1l = IiliiiillII1lillIli("#", ...) local IlliIi1IlIilIl1ii1l = { ... } return i1i1l1iIl1l1iiIiI1l, IlliIi1IlIilIl1ii1l end local function lI1I111llIi1iiiii11() while true do local l1I1iii11Iiiill1lI1 = lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] local lIl1IllIIil11III1ll11 = l1I1iii11Iiiill1lI1[7] iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + 1 if lIl1IllIIil11III1ll11 >= 11 then if lIl1IllIIil11III1ll11 >= 17 then if lIl1IllIIil11III1ll11 < 20 then if lIl1IllIIil11III1ll11 < 18 then lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = l1I1iii11Iiiill1lI1[6] elseif lIl1IllIIil11III1ll11 == 19 then if l1I1iii11Iiiill1lI1[9] == 5 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 14, [10] = (l1I1iii11Iiiill1lI1[10] - 73) % 256, [8] = (l1I1iii11Iiiill1lI1[8] - 73) % 256 } else i1liiIi111lllli1I1l[l1I1iii11Iiiill1lI1[8]] = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] end else local lI11l11IIl1l1I11lli, i1i1l1iIl1l1iiIiI1l if l1I1iii11Iiiill1lI1[1] then lI11l11IIl1l1I11lli = l1I1iii11Iiiill1lI1[4] else lI11l11IIl1l1I11lli = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end if l1I1iii11Iiiill1lI1[5] then i1i1l1iIl1l1iiIiI1l = l1I1iii11Iiiill1lI1[2] else i1i1l1iIl1l1iiIiI1l = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[9]] end if lI11l11IIl1l1I11lli == i1i1l1iIl1l1iiIiI1l ~= (l1I1iii11Iiiill1lI1[10] ~= 0) then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + 1 end end elseif lIl1IllIIil11III1ll11 >= 21 then if lIl1IllIIil11III1ll11 ~= 22 then if l1I1iii11Iiiill1lI1[9] == 220 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 19, [10] = (l1I1iii11Iiiill1lI1[10] - 185) % 256, [8] = (l1I1iii11Iiiill1lI1[8] - 185) % 256 } elseif l1I1iii11Iiiill1lI1[9] == 141 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 16, [10] = (l1I1iii11Iiiill1lI1[10] - 127) % 256, [8] = (l1I1iii11Iiiill1lI1[8] - 127) % 256 } else lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = #lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end else local i111llII1Il1I1I1lli = l1I1iii11Iiiill1lI1[10] local iIli1I111lIliIiIl1l = l1I1iii11Iiiill1lI1[8] local l1Iiil11i1llii111ll = l1I1iii11Iiiill1lI1[9] local iI1IIiliIl1Ii11lIl1, ililI1iI1i11i11IIIi, lI1I111llIi1iiiii11 if iIli1I111lIliIiIl1l ~= 1 then if iIli1I111lIliIiIl1l ~= 0 then ililI1iI1i11i11IIIi = i111llII1Il1I1I1lli + iIli1I111lIliIiIl1l - 1 else ililI1iI1i11i11IIIi = lIl11iiI11I111iIllI11 end ililI1iI1i11i11IIIi, iI1IIiliIl1Ii11lIl1 = I1ii1I1iil1Ill1lI1I(lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli](lIlli1li11IlIiiiIii1I(lIlIii1ll1lilII1i1Il1, i111llII1Il1I1I1lli + 1, ililI1iI1i11i11IIIi))) else ililI1iI1i11i11IIIi, iI1IIiliIl1Ii11lIl1 = I1ii1I1iil1Ill1lI1I(lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli]()) end if l1Iiil11i1llii111ll ~= 1 then if l1Iiil11i1llii111ll ~= 0 then ililI1iI1i11i11IIIi = i111llII1Il1I1I1lli + l1Iiil11i1llii111ll - 2 lIl11iiI11I111iIllI11 = ililI1iI1i11i11IIIi + 1 else ililI1iI1i11i11IIIi = ililI1iI1i11i11IIIi + i111llII1Il1I1I1lli - 1 lIl11iiI11I111iIllI11 = ililI1iI1i11i11IIIi end lI1I111llIi1iiiii11 = 0 for I1111I1lII1Ii1ii1I1 = i111llII1Il1I1I1lli, ililI1iI1i11i11IIIi do lI1I111llIi1iiiii11 = lI1I111llIi1iiiii11 + 1 lIlIii1ll1lilII1i1Il1[I1111I1lII1Ii1ii1I1] = iI1IIiliIl1Ii11lIl1[lI1I111llIi1iiiii11] end else lIl11iiI11I111iIllI11 = i111llII1Il1I1I1lli - 1 end for I1111I1lII1Ii1ii1I1 = lIl11iiI11I111iIllI11 + 1, liliiIIi1ii1lI1lili do lIlIii1ll1lilII1i1Il1[I1111I1lII1Ii1ii1I1] = nil end end else local I1IIi1IIiIiIIIIili1 = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] local i1i1l1iIl1l1iiIiI1l if l1I1iii11Iiiill1lI1[5] then i1i1l1iIl1l1iiIiI1l = l1I1iii11Iiiill1lI1[2] else i1i1l1iIl1l1iiIiI1l = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[9]] end lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10] + 1] = I1IIi1IIiIiIIIIili1 lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = I1IIi1IIiIiIIIIili1[i1i1l1iIl1l1iiIiI1l] end elseif lIl1IllIIil11III1ll11 < 14 then if lIl1IllIIil11III1ll11 >= 12 then if lIl1IllIIil11III1ll11 ~= 13 then local i1i1l1iIl1l1iiIiI1l if l1I1iii11Iiiill1lI1[5] then i1i1l1iIl1l1iiIiI1l = l1I1iii11Iiiill1lI1[2] else i1i1l1iIl1l1iiIiI1l = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[9]] end lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]][i1i1l1iIl1l1iiIiI1l] else iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + (l1I1iii11Iiiill1lI1[3] - I1ilI1li1I1i11IllIl) end else for I1111I1lII1Ii1ii1I1 = l1I1iii11Iiiill1lI1[10], l1I1iii11Iiiill1lI1[8] do lIlIii1ll1lilII1i1Il1[I1111I1lII1Ii1ii1I1] = nil end end elseif lIl1IllIIil11III1ll11 >= 15 then if lIl1IllIIil11III1ll11 ~= 16 then if l1I1iii11Iiiill1lI1[9] == 36 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 5, [10] = (l1I1iii11Iiiill1lI1[10] - 57) % 256, [9] = (l1I1iii11Iiiill1lI1[8] - 57) % 256 } else lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = not lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end elseif l1I1iii11Iiiill1lI1[9] == 178 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 10, [10] = (l1I1iii11Iiiill1lI1[10] - 129) % 256, [8] = (l1I1iii11Iiiill1lI1[8] - 129) % 256 } else liI1iIiiililll1ii1i[lIlIii1ll1lilII1i1Il1] = nil local i111llII1Il1I1I1lli = l1I1iii11Iiiill1lI1[10] local lIli11I1Ii11l1lliii1I = l1I1iii11Iiiill1lI1[8] if lIli11I1Ii11l1lliii1I == 1 then return true end local ililI1iI1i11i11IIIi = i111llII1Il1I1I1lli + lIli11I1Ii11l1lliii1I - 2 if lIli11I1Ii11l1lliii1I == 0 then ililI1iI1i11i11IIIi = lIl11iiI11I111iIllI11 end return true, i111llII1Il1I1I1lli, ililI1iI1i11i11IIIi end else lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end elseif lIl1IllIIil11III1ll11 < 5 then if lIl1IllIIil11III1ll11 < 2 then if lIl1IllIIil11III1ll11 ~= 1 then lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = l1I1iii11Iiiill1lI1[8] ~= 0 if l1I1iii11Iiiill1lI1[9] ~= 0 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + 1 end else local lI11l11IIl1l1I11lli, i1i1l1iIl1l1iiIiI1l if l1I1iii11Iiiill1lI1[1] then lI11l11IIl1l1I11lli = l1I1iii11Iiiill1lI1[4] else lI11l11IIl1l1I11lli = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end if l1I1iii11Iiiill1lI1[5] then i1i1l1iIl1l1iiIiI1l = l1I1iii11Iiiill1lI1[2] else i1i1l1iIl1l1iiIiI1l = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[9]] end lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = lI11l11IIl1l1I11lli - i1i1l1iIl1l1iiIiI1l end elseif lIl1IllIIil11III1ll11 >= 3 then if lIl1IllIIil11III1ll11 == 4 then if l1I1iii11Iiiill1lI1[8] == 97 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 8, [10] = (l1I1iii11Iiiill1lI1[10] - 128) % 256, [8] = (l1I1iii11Iiiill1lI1[9] - 128) % 256 } else local i111llII1Il1I1I1lli = l1I1iii11Iiiill1lI1[10] local lIIiI111l1i1iiIlii1 = i111llII1Il1I1I1lli + 2 local llil1l1IllllIliilI1 = { lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli](lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli + 1], lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli + 2]) } for I1111I1lII1Ii1ii1I1 = 1, l1I1iii11Iiiill1lI1[9] do lIlIii1ll1lilII1i1Il1[lIIiI111l1i1iiIlii1 + I1111I1lII1Ii1ii1I1] = llil1l1IllllIliilI1[I1111I1lII1Ii1ii1I1] end if lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli + 3] ~= nil then lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli + 2] = lIlIii1ll1lilII1i1Il1[i111llII1Il1I1I1lli + 3] else iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + 1 end end else lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = lIlI1IiIl1I11i1IllIIi[l1I1iii11Iiiill1lI1[6]] end else local lI11l11IIl1l1I11lli, i1i1l1iIl1l1iiIiI1l if l1I1iii11Iiiill1lI1[1] then lI11l11IIl1l1I11lli = l1I1iii11Iiiill1lI1[4] else lI11l11IIl1l1I11lli = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end if l1I1iii11Iiiill1lI1[5] then i1i1l1iIl1l1iiIiI1l = l1I1iii11Iiiill1lI1[2] else i1i1l1iIl1l1iiIiI1l = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[9]] end lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = lI11l11IIl1l1I11lli + i1i1l1iIl1l1iiIiI1l end elseif lIl1IllIIil11III1ll11 < 8 then if lIl1IllIIil11III1ll11 < 6 then if not not lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] == (l1I1iii11Iiiill1lI1[9] == 0) then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + 1 end elseif lIl1IllIIil11III1ll11 ~= 7 then lIlI1IiIl1I11i1IllIIi[l1I1iii11Iiiill1lI1[6]] = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] else local lI11l11IIl1l1I11lli, i1i1l1iIl1l1iiIiI1l if l1I1iii11Iiiill1lI1[1] then lI11l11IIl1l1I11lli = l1I1iii11Iiiill1lI1[4] else lI11l11IIl1l1I11lli = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[8]] end if l1I1iii11Iiiill1lI1[5] then i1i1l1iIl1l1iiIiI1l = l1I1iii11Iiiill1lI1[2] else i1i1l1iIl1l1iiIiI1l = lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[9]] end lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]][lI11l11IIl1l1I11lli] = i1i1l1iIl1l1iiIiI1l end elseif lIl1IllIIil11III1ll11 >= 9 then if lIl1IllIIil11III1ll11 ~= 10 then local IIllllI1iIll1III1l1 = ili1i11IlIiil1iIII1[l1I1iii11Iiiill1lI1[3]] local lIl1ilIIlliilIiiIllI1 = {} if IIllllI1iIll1III1l1[Ill1III1II1I1liill1] > 0 then do local lIlII1ilIIlllIliIIliI = {} lIl1ilIIlliilIiiIllI1 = i11Il1IliIilI1l1iIi({}, { __index = function(IlliIi1IlIilIl1ii1l, iIlli1lli1IiIii1IlI) local lI1i1l1i1ii11iii1lI = lIlII1ilIIlllIliIIliI[iIlli1lli1IiIii1IlI] return lI1i1l1i1ii11iii1lI[1][lI1i1l1i1ii11iii1lI[2]] end, __newindex = function(IlliIi1IlIilIl1ii1l, iIlli1lli1IiIii1IlI, IiIilIil1il1liiiiI1) local lI1i1l1i1ii11iii1lI = lIlII1ilIIlllIliIIliI[iIlli1lli1IiIii1IlI] lI1i1l1i1ii11iii1lI[1][lI1i1l1i1ii11iii1lI[2]] = IiIilIil1il1liiiiI1 end }) for I1111I1lII1Ii1ii1I1 = 1, IIllllI1iIll1III1l1[Ill1III1II1I1liill1] do local ii1llIIIll1Il1I11Ii = lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] if ii1llIIIll1Il1I11Ii[iliIiii11IiIi11iiII] == l1Ili1Il1iIIIill11I then lIlII1ilIIlllIliIIliI[I1111I1lII1Ii1ii1I1 - 1] = { lIlIii1ll1lilII1i1Il1, ii1llIIIll1Il1I11Ii[Iillill1I1Iii11ilIi] } elseif ii1llIIIll1Il1I11Ii[iliIiii11IiIi11iiII] == Iill1l1Ili1111i1lIi then lIlII1ilIIlllIliIIliI[I1111I1lII1Ii1ii1I1 - 1] = { i1liiIi111lllli1I1l, ii1llIIIll1Il1I11Ii[Iillill1I1Iii11ilIi] } end iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl + 1 end if not liI1iIiiililll1ii1i[lIlIii1ll1lilII1i1Il1] then liI1iIiiililll1ii1i[lIlIii1ll1lilII1i1Il1] = {lIlII1ilIIlllIliIIliI} else iiIil1Ill1llIIllIlI(liI1iIiiililll1ii1i[lIlIii1ll1lilII1i1Il1], lIlII1ilIIlllIliIIliI) end end end local lI1IIliiiiii1iIl1II = iiI1lIi1lIl1l1llIII(IIllllI1iIll1III1l1, lIlI1IiIl1I11i1IllIIi, lIl1ilIIlliilIiiIllI1) lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = lI1IIliiiiii1iIl1II elseif l1I1iii11Iiiill1lI1[9] == 16 then iIlIi1iII11i11IlIIl = iIlIi1iII11i11IlIIl - 1 lIllI11ilillI1il1IiII[iIlIi1iII11i11IlIIl] = { [7] = 11, [10] = (l1I1iii11Iiiill1lI1[10] - 28) % 256, [8] = (l1I1iii11Iiiill1lI1[8] - 28) % 256 } else lIlIii1ll1lilII1i1Il1[l1I1iii11Iiiill1lI1[10]] = i1liiIi111lllli1I1l[l1I1iii11Iiiill1lI1[8]] end else local lIlIIlIIiiiiII1II11Il = l1I1iii11Iiiill1lI1[10] local lIl1I1I11lliIiiiIiIlI = {} for l1ilI1ilIil1l1IIiiI, lIlII1ilIIlllIliIIliI in pairs(liI1iIiiililll1ii1i[lIlIii1ll1lilII1i1Il1]) do for l1ilI1ilIil1l1IIiiI, lI1i1l1i1ii11iii1lI in pairs(lIlII1ilIIlllIliIIliI) do if lI1i1l1i1ii11iii1lI[1] == lIlIii1ll1lilII1i1Il1 and lIlIIlIIiiiiII1II11Il <= lI1i1l1i1ii11iii1lI[2] then local IlIliIIIliIIli111lI = lI1i1l1i1ii11iii1lI[2] if not lIl1I1I11lliIiiiIiIlI[IlIliIIIliIIli111lI] then iiI1lIi1lIl1l1llIII(IIlIi1II1I1I1iiiiii, lIlIii1ll1lilII1i1Il1[IlIliIIIliIIli111lI]) lIl1I1I11lliIiiiIiIlI[IlIliIIIliIIli111lI] = #IIlIi1II1I1I1iiiiii end lI1i1l1i1ii11iii1lI[1] = IIlIi1II1I1I1iiiiii lI1i1l1i1ii11iii1lI[2] = lIl1I1I11lliIiiiIiIlI[IlIliIIIliIIli111lI] end end end end end end local l1lI11iIi1llIIIIIii, II11ilIllliIi111lii, lIlIIlIIiiiiII1II11Il, lIlIiiliiliI1IilI11II = lli1lIlIiiiliiIl11i(lI1I111llIi1iiiii11) if l1lI11iIi1llIIIIIii then if lIlIIlIIiiiiII1II11Il then return lIlli1li11IlIiiiIii1I(lIlIii1ll1lilII1i1Il1, lIlIIlIIiiiiII1II11Il, lIlIiiliiliI1IilI11II) end else ilI11liliII1i11IIII("Luraph Script:" .. (l1i11ll1i11IlililiI[iIlIi1iII11i11IlIIl - 1] or "") .. ": " .. l1I1IlliIlIi1Iii1lI(II11ilIllliIi111lii), 0) end end i1iiIIlillIiIIIi1il(III1lIlIll11i1lllll, lIlI1IiIl1I11i1IllIIi) return III1lIlIll11i1lllll end local lIl1I1I11lliIiiiIiIlI = Il1I1Il1l1IIiliiIlI() return iiI1lIi1lIl1l1llIII(lIl1I1I11lliIiiiIiIlI, lIlI1IiIl1I11i1IllIIi)() end iI1il1111lii1lIililIl1lllIii1l11illi1I1()) 